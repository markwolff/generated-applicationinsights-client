/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";

/**
 * The abstract common base of all domains.
 */
export interface Domain {
  /**
   * Ignored value.
   */
  test?: string;
}

/**
 * An interface representing AvailabilityData.
 */
export interface AvailabilityData extends Domain {
  /**
   * Schema version. Default value: 2.
   */
  ver: number;
  /**
   * Identifier of a test run. Use it to correlate steps of test run and telemetry generated by the
   * service.
   */
  id: string;
  /**
   * Name of the test that these availability results represent.
   */
  name: string;
  /**
   * Duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
   */
  duration: string;
  /**
   * Success flag.
   */
  success: boolean;
  /**
   * Name of the location where the test was run from.
   */
  runLocation?: string;
  /**
   * Diagnostic message for the result.
   */
  message?: string;
  /**
   * Collection of custom properties. TODO: max key length validate
   */
  properties?: { [propertyName: string]: string };
  /**
   * Collection of custom measurements. TODO: max key length validate
   */
  measurements?: { [propertyName: string]: number };
}

/**
 * Data struct to contain only C section with custom fields.
 */
export interface Base {
  /**
   * Name of item (B section) if any. If telemetry data is derived straight from this, this should
   * be null.
   */
  baseType?: string;
  /**
   * The data payload for the telemetry request
   */
  baseData?: Domain;
}

/**
 * Metric data single measurement.
 */
export interface DataPoint {
  /**
   * Namespace of the metric.
   */
  ns?: string;
  /**
   * Name of the metric.
   */
  name: string;
  /**
   * Metric type. Single measurement or the aggregated value. TODO: add default. Possible values
   * include: 'Measurement', 'Aggregation'
   */
  kind?: Kind;
  /**
   * Single value for measurement. Sum of individual measurements for the aggregation.
   */
  value: number;
  /**
   * Metric weight of the aggregated metric. Should not be set for a measurement.
   */
  count?: number;
  /**
   * Minimum value of the aggregated metric. Should not be set for a measurement.
   */
  min?: number;
  /**
   * Maximum value of the aggregated metric. Should not be set for a measurement.
   */
  max?: number;
  /**
   * Standard deviation of the aggregated metric. Should not be set for a measurement.
   */
  stdDev?: number;
}

/**
 * An interface representing EventData.
 */
export interface EventData extends Domain {
  /**
   * Schema version. Default value: 2.
   */
  ver: number;
  /**
   * Event name. Keep it low cardinality to allow proper grouping and useful metrics.
   */
  name: string;
  /**
   * Collection of custom properties. TODO: max key length validate
   */
  properties?: { [propertyName: string]: string };
  /**
   * Collection of custom measurements. TODO: max key length validate
   */
  measurements?: { [propertyName: string]: number };
}

/**
 * Stack frame information.
 */
export interface StackFrame {
  level: number;
  /**
   * Method name.
   */
  method: string;
  /**
   * Name of the assembly (dll, jar, etc.) containing this function.
   */
  assembly?: string;
  /**
   * File name or URL of the method implementation.
   */
  fileName?: string;
  /**
   * Line number of the code implementation.
   */
  line?: number;
}

/**
 * Exception details of the exception in a chain.
 */
export interface ExceptionDetails {
  /**
   * In case exception is nested (outer exception contains inner one), the id and outerId
   * properties are used to represent the nesting.
   */
  id?: number;
  /**
   * The value of outerId is a reference to an element in ExceptionDetails that represents the
   * outer exception
   */
  outerId?: number;
  /**
   * Exception type name.
   */
  typeName?: string;
  /**
   * Exception message.
   */
  message: string;
  /**
   * Indicates if full exception stack is provided in the exception. The stack may be trimmed, such
   * as in the case of a StackOverflow exception. Default value: true.
   */
  hasFullStack?: boolean;
  /**
   * Text describing the stack. Either stack or parsedStack should have a value.
   */
  stack?: string;
  /**
   * List of stack frames. Either stack or parsedStack should have a value.
   */
  parsedStack?: StackFrame[];
}

/**
 * An interface representing ExceptionData.
 */
export interface ExceptionData extends Domain {
  /**
   * Schema version. Default value: 2.
   */
  ver: number;
  /**
   * Exception chain - list of inner exceptions.
   */
  exceptions?: ExceptionDetails[];
  /**
   * Severity level. Mostly used to indicate exception severity level when it is reported by
   * logging library. Possible values include: 'Verbose', 'Information', 'Warning', 'Error',
   * 'Critical'
   */
  severityLevel?: SeverityLevel;
  /**
   * Identifier of where the exception was thrown in code. Used for exceptions grouping. Typically
   * a combination of exception type and a function from the call stack.
   */
  problemId?: string;
  /**
   * Collection of custom properties. TODO: max key length validate
   */
  properties?: { [propertyName: string]: string };
  /**
   * Collection of custom measurements. TODO: max key length validate
   */
  measurements?: { [propertyName: string]: number };
}

/**
 * An interface representing MessageData.
 */
export interface MessageData extends Domain {
  /**
   * Schema version. Default value: 2.
   */
  ver: number;
  /**
   * Trace message
   */
  message: string;
  /**
   * Trace severity level. Possible values include: 'Verbose', 'Information', 'Warning', 'Error',
   * 'Critical'
   */
  severityLevel?: SeverityLevel1;
  /**
   * Collection of custom properties. TODO: max key length validate
   */
  properties?: { [propertyName: string]: string };
  /**
   * Collection of custom measurements. TODO: max key length validate
   */
  measurements?: { [propertyName: string]: number };
}

/**
 * An interface representing MetricsData.
 */
export interface MetricsData extends Domain {
  /**
   * Schema version. Default value: 2.
   */
  ver: number;
  /**
   * List of metrics. Only one metric in the list is currently supported by Application Insights
   * storage. If multiple data points were sent only the first one will be used.
   */
  metrics: DataPoint[];
  /**
   * Collection of custom properties. TODO: max key length validate
   */
  properties?: { [propertyName: string]: string };
}

/**
 * An interface representing PageViewData.
 */
export interface PageViewData extends Domain {
  /**
   * Schema version. Default value: 2.
   */
  ver: number;
  /**
   * Identifier of a page view instance. Used for correlation between page view and other telemetry
   * items.
   */
  id: string;
  /**
   * Event name. Keep it low cardinality to allow proper grouping and useful metrics.
   */
  name: string;
  /**
   * Request URL with all query string parameters
   */
  url?: string;
  /**
   * Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this is the
   * duration. For a page view with performance information (PageViewPerfData), this is the page
   * load time. Must be less than 1000 days.
   */
  duration?: string;
  /**
   * Fully qualified page URI or URL of the referring page; if unknown, leave blank
   */
  referredUri?: string;
  /**
   * Collection of custom properties. TODO: max key length validate
   */
  properties?: { [propertyName: string]: string };
  /**
   * Collection of custom measurements. TODO: max key length validate
   */
  measurements?: { [propertyName: string]: number };
}

/**
 * An interface representing PageViewPerfData.
 */
export interface PageViewPerfData extends Domain {
  /**
   * Schema version. Default value: 2.
   */
  ver: number;
  /**
   * Identifier of a page view instance. Used for correlation between page view and other telemetry
   * items.
   */
  id: string;
  /**
   * Event name. Keep it low cardinality to allow proper grouping and useful metrics.
   */
  name: string;
  /**
   * Request URL with all query string parameters
   */
  url?: string;
  /**
   * Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this is the
   * duration. For a page view with performance information (PageViewPerfData), this is the page
   * load time. Must be less than 1000 days.
   */
  duration?: string;
  /**
   * Performance total in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff
   */
  perfTotal?: string;
  /**
   * Network connection time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff
   */
  networkConnect?: string;
  /**
   * Sent request time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff
   */
  sentRequest?: string;
  /**
   * Received response time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff
   */
  receivedResponse?: string;
  /**
   * DOM processing time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff
   */
  domProcessing?: string;
  /**
   * Collection of custom properties. TODO: max key length validate
   */
  properties?: { [propertyName: string]: string };
  /**
   * Collection of custom measurements. TODO: max key length validate
   */
  measurements?: { [propertyName: string]: number };
}

/**
 * An interface representing RemoteDependencyData.
 */
export interface RemoteDependencyData extends Domain {
  /**
   * Schema version. Default value: 2.
   */
  ver: number;
  /**
   * Identifier of a dependency call instance. Used for correlation with the request telemetry item
   * corresponding to this dependency call.
   */
  id?: string;
  /**
   * Name of the command initiated with this dependency call. Low cardinality value. Examples are
   * stored procedure name and URL path template.
   */
  name: string;
  /**
   * Result code of a dependency call. Examples are SQL error code and HTTP status code.
   */
  resultCode?: string;
  /**
   * Command initiated by this dependency call. Examples are SQL statement and HTTP URL's with all
   * query parameters.
   */
  data?: string;
  /**
   * Dependency type name. Very low cardinality value for logical grouping of dependencies and
   * interpretation of other fields like commandName and resultCode. Examples are SQL, Azure table,
   * and HTTP.
   */
  type?: string;
  /**
   * Target site of a dependency call. Examples are server name, host address.
   */
  target?: string;
  /**
   * Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
   */
  duration: string;
  /**
   * Indication of successfull or unsuccessfull call. Default value: true.
   */
  success?: boolean;
  /**
   * Collection of custom properties. TODO: max key length validate
   */
  properties?: { [propertyName: string]: string };
  /**
   * Collection of custom measurements. TODO: max key length validate
   */
  measurements?: { [propertyName: string]: number };
}

/**
 * An interface representing RequestData.
 */
export interface RequestData extends Domain {
  /**
   * Schema version. Default value: 2.
   */
  ver: number;
  /**
   * Identifier of a request call instance. Used for correlation between request and other
   * telemetry items.
   */
  id: string;
  /**
   * Name of the request. Represents code path taken to process request. Low cardinality value to
   * allow better grouping of requests. For HTTP requests it represents the HTTP method and URL
   * path template like 'GET /values/{id}'.
   */
  name?: string;
  /**
   * Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
   */
  duration: string;
  /**
   * Indication of successfull or unsuccessfull call. Default value: true.
   */
  success: boolean;
  /**
   * Result of a request execution. HTTP status code for HTTP requests.
   */
  responseCode: string;
  /**
   * Source of the request. Examples are the instrumentation key of the caller or the ip address of
   * the caller.
   */
  source?: string;
  /**
   * Request URL with all query string parameters.
   */
  url?: string;
  /**
   * Collection of custom properties. TODO: max key length validate
   */
  properties?: { [propertyName: string]: string };
  /**
   * Collection of custom measurements. TODO: max key length validate
   */
  measurements?: { [propertyName: string]: number };
}

/**
 * The error details
 */
export interface ErrorDetails {
  /**
   * The index in the original payload of the item.
   */
  index?: number;
  /**
   * The item specific [HTTP Response status code](#Response Status Codes).
   */
  statusCode?: number;
  /**
   * The error message.
   */
  message?: string;
}

/**
 * Response containing the status of each telemetry item.
 */
export interface TrackResponse {
  /**
   * The number of items received.
   */
  itemsReceived?: number;
  /**
   * The number of items accepted.
   */
  itemsAccepted?: number;
  /**
   * An array of error detail objects.
   */
  errors?: ErrorDetails[];
}

/**
 * System variables for a telemetry item.
 */
export interface TelemetryEnvelope {
  /**
   * Envelope version. For internal use only. By assigning this the default, it will not be
   * serialized within the payload unless changed to a value other than #1. Default value: 1.
   */
  ver?: number;
  /**
   * Type name of telemetry data item.
   */
  name: string;
  /**
   * Event date time when telemetry item was created. This is the wall clock time on the client
   * when the event was generated. There is no guarantee that the client's time is accurate. This
   * field must be formatted in UTC ISO 8601 format, with a trailing 'Z' character, as described
   * publicly on https://en.wikipedia.org/wiki/ISO_8601#UTC. Note: the number of decimal seconds
   * digits provided are variable (and unspecified). Consumers should handle this, i.e. managed
   * code consumers should not use format 'O' for parsing as it specifies a fixed length. Example:
   * 2009-06-15T13:45:30.0000000Z.
   */
  time: Date;
  /**
   * Sampling rate used in application. This telemetry item represents 1 / sampleRate actual
   * telemetry items. Default value: 100.
   */
  sampleRate?: number;
  /**
   * Sequence field used to track absolute order of uploaded events.
   */
  seq?: string;
  /**
   * The instrumentation key of the Application Insights resource.
   */
  iKey?: string;
  /**
   * Key/value collection of context properties. See ContextTagKeys for information on available
   * properties.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Telemetry data item.
   */
  data?: Base;
}

/**
 * An interface representing AppInsightsClientOptions.
 */
export interface AppInsightsClientOptions extends ServiceClientOptions {
  /**
   * Breeze endpoint: https://dc.services.visualstudio.com. Default value:
   * 'https://dc.services.visualstudio.com'.
   */
  endpoint?: string;
}

/**
 * Defines values for Kind.
 * Possible values include: 'Measurement', 'Aggregation'
 * @readonly
 * @enum {string}
 */
export type Kind = 'Measurement' | 'Aggregation';

/**
 * Defines values for SeverityLevel.
 * Possible values include: 'Verbose', 'Information', 'Warning', 'Error', 'Critical'
 * @readonly
 * @enum {string}
 */
export type SeverityLevel = 'Verbose' | 'Information' | 'Warning' | 'Error' | 'Critical';

/**
 * Defines values for SeverityLevel1.
 * Possible values include: 'Verbose', 'Information', 'Warning', 'Error', 'Critical'
 * @readonly
 * @enum {string}
 */
export type SeverityLevel1 = 'Verbose' | 'Information' | 'Warning' | 'Error' | 'Critical';

/**
 * Contains response data for the track operation.
 */
export type TrackResponse2 = TrackResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TrackResponse;
    };
};
